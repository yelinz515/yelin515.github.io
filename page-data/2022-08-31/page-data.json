{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/2022-08-31/",
    "result": {"data":{"cur":{"id":"cd7cebb1-1eae-5fd9-8c03-4534ebeec7f0","html":"<h2 id=\"side-effect\" style=\"position:relative;\"><a href=\"#side-effect\" aria-label=\"side effect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Side Effect</h2>\n<blockquote>\n<p>함수의 입력 외에도 함수의 결과에 영향을 미치는 요인</p>\n</blockquote>\n<p>ex) 네트워크 요청 (백엔드 API 요청)</p>\n<br>\n<h2 id=\"cmarket-hooks\" style=\"position:relative;\"><a href=\"#cmarket-hooks\" aria-label=\"cmarket hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cmarket Hooks</h2>\n<p>지금까지 배운 React Router, React Hooks를 이용해 과제를 해보았다. 어려웠던 부분, 부족한 부분, 느낀점에 대해 얘기해보려 한다.</p>\n<h3 id=\"appjs\" style=\"position:relative;\"><a href=\"#appjs\" aria-label=\"appjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>cartItems<span class=\"token punctuation\">,</span> setCartItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">.</span>cartItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Nav cartItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cartItems<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Routes<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>ItemListContainer cartItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cartItems<span class=\"token punctuation\">}</span> setCartItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setCartItems<span class=\"token punctuation\">}</span> items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route\n          path<span class=\"token operator\">=</span><span class=\"token string\">\"/shoppingcart\"</span>\n          element<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>ShoppingCart setCartItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setCartItems<span class=\"token punctuation\">}</span> cartItems<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>cartItems<span class=\"token punctuation\">}</span> items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Routes<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>img\n        id<span class=\"token operator\">=</span><span class=\"token string\">\"logo_foot\"</span>\n        src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PUBLIC_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/codestates-logo.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n        alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo_foot\"</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h3 id=\"어려웠던-내용-\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EB%82%B4%EC%9A%A9-\" aria-label=\"어려웠던 내용  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 내용 🤢</h3>\n<h3 id=\"itemlistcontainerjs\" style=\"position:relative;\"><a href=\"#itemlistcontainerjs\" aria-label=\"itemlistcontainerjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ItemListContainer.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ItemListContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> cartItems<span class=\"token punctuation\">,</span> setCartItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">itemId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> cartItems<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>itemId <span class=\"token operator\">===</span> itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 장바구니에 새로 추가</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>found <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setCartItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>cartItems<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>itemId<span class=\"token punctuation\">,</span> quantity <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>setCartItems<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Item item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>idx<span class=\"token punctuation\">}</span> handleClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">cartItems.itemId</code>와 <code class=\"language-text\">itemId</code>가 같으면 found이다. [0]을 해준 이유는 기존에 장바구니에 없었다면 undefined였을 것이고, 있었다면 undefined가 아니기 때문이다. 그래서 조건이 undefined라면 수량을 1로해서 새로 추가하는 것이다.</p>\n<br>\n<h3 id=\"shoppingcartjs\" style=\"position:relative;\"><a href=\"#shoppingcartjs\" aria-label=\"shoppingcartjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ShoppingCart.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ShoppingCart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> cartItems<span class=\"token punctuation\">,</span> setCartItems <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checkedItems<span class=\"token punctuation\">,</span> setCheckedItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>cartItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleQuantityChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">quantity<span class=\"token punctuation\">,</span> itemId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCartItems</span><span class=\"token punctuation\">(</span>cartItems<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> itemId <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>itemId <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"itemId\"</span><span class=\"token operator\">:</span>itemId<span class=\"token punctuation\">,</span> <span class=\"token string\">\"quantity\"</span><span class=\"token operator\">:</span>quantity<span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleDelete</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">itemId</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCheckedItems</span><span class=\"token punctuation\">(</span>checkedItems<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">!==</span> itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCartItems</span><span class=\"token punctuation\">(</span>cartItems<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>itemId <span class=\"token operator\">!==</span> itemId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">handleQuantityChange</code>는 장바구니에 있는 수량 버튼을 눌러 수량을 추가하거나 삭제할 수 있다.</p>\n<p><code class=\"language-text\">'handleDelete'</code>는 <code class=\"language-text\">cartItems.itemId</code>과 <code class=\"language-text\">itemId</code>가 일치하지 않은 아이템을 장바구니에 남겨놓는다.</p>\n<br>\n<h3 id=\"부족한-내용-\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%A1%B1%ED%95%9C-%EB%82%B4%EC%9A%A9-\" aria-label=\"부족한 내용  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부족한 내용 🧐</h3>\n<hr>\n<p>장바구니에 있던 아이템을 다시 장바구니에 넣으면 기존에 있던 수량에 추가되는 기능을 넣어보면 좋을 것 같다.</p>\n<br>\n<h2 id=\"느낀점-\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90-\" aria-label=\"느낀점  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점 🤠</h2>\n<hr>\n<p>오늘은 과제를 해결해 나갈 수 있게 지시해주는 TODO가 없어서 어려웠다. TODO의 소중함을 깨닫는 시간이었다. 다시 풀어보고 더 공부해보겠습니다.</p>","excerpt":"Side Effect 함수의 입력 외에도 함수의 결과에 영향을 미치는 요인 ex) 네트워크 요청 (백엔드 API 요청) Cmarket Hooks 지금까지 배운 React Router, React Hooks를 이용해 과제를 해보았다. 어려웠던 부분, 부족한 부분, 느낀점에 대해 얘기해보려 한다. App.js 어려웠던 내용 🤢 ItemListContainer.js 와 가 같으면 found이다. [0]을 해준 이유는 기존에 장바구니에 없었다면 undefined였을 것이고, 있었다면 undefined가 아니기 때문이다. 그래서 조건이 undefined라면 수량을 1로해서 새로 추가하는 것이다. ShoppingCart.js 는 장바구니에 있는 수량 버튼을 눌러 수량을 추가하거나 삭제할 수 있다. 는 과 가 일치하지 않은 아이템을 장바구니에 남겨놓는다. 부족한 내용 🧐 장바구니에 있던 아이템을 다시 장바구니에 넣으면 기존에 있던 수량에 추가되는 기능을 넣어보면 좋을 것 같다. 느낀점 🤠 오늘…","frontmatter":{"date":"August 31, 2022","title":"Cmarket Hooks","categories":"codestates blog","author":"김예린","emoji":null},"fields":{"slug":"/2022-08-31/"}},"next":{"id":"883d012c-15de-5564-ad2d-aee5933f1bc3","html":"<p>Styled-Component, useRef를 이용해 과제를 해보았다. 어려웠던 부분, 부족한 부분, 느낀점에 대해 얘기해보려 한다.</p>\n<h2 id=\"어려웠던-내용-\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EB%82%B4%EC%9A%A9-\" aria-label=\"어려웠던 내용  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어려웠던 내용 🤢</h2>\n<h3 id=\"tagjs\" style=\"position:relative;\"><a href=\"#tagjs\" aria-label=\"tagjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tag.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> initialTags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'CodeStates'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'kimcoding'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>tags<span class=\"token punctuation\">,</span> setTags<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialTags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">removeTags</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">indexToRemove</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    tags<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>indexToRemove<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>tags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">removeTags</code>에서는 태그를 삭제하기 위해 <code class=\"language-text\">splice</code>를 이용해 태그를 하나씩 삭제하고, <code class=\"language-text\">setTags</code>에 전개연산자를 이용해 <code class=\"language-text\">tags</code>의 좌항에서 명시적으로 할당되지 않은 나머지 배열 값들을 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTags</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// - 아무것도 입력하지 않은 채 Enter 키 입력시 메소드 실행하지 말기</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!==</span> <span class=\"token string\">'Enter'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// - 이미 입력되어 있는 태그인지 검사하여 이미 있는 태그 아니거나 마우것도 입력하지 않았다면 추가하기</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> val <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTags</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// - 태그가 추가되면 input 창 비우기</span>\n      event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">addTags</code>에서는 tags 배열에 새로운 태그를 추가해야 한다. 주석을 참고하면 된다.</p>\n<br>\n<h3 id=\"autocompletejs수정\" style=\"position:relative;\"><a href=\"#autocompletejs%EC%88%98%EC%A0%95\" aria-label=\"autocompletejs수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Autocomplete.js(수정)</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> deselectedOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'rustic'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'antique'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'vinyl'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'vintage'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'refurbished'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'신품'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'빈티지'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'중고A급'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'중고B급'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'골동품'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Autocomplete</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>hasText<span class=\"token punctuation\">,</span> setHasText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>inputValue<span class=\"token punctuation\">,</span> setInputValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">,</span> setOptions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>deselectedOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputValue <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setHasText</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>inputValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleInputChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// input에 텍스트가 있는지 없는지 확인하는 코드</span>\n    value <span class=\"token operator\">?</span> <span class=\"token function\">setHasText</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">setHasText</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// updateText</span>\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// dropdown을 위한 기능</span>\n    <span class=\"token keyword\">const</span> filterRegex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new RegExp 하면, RegExp 객체가 생성(텍스트를 판별할 때 사용)</span>\n    <span class=\"token keyword\">const</span> resultOptions <span class=\"token operator\">=</span> deselectedOptions<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      option<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>filterRegex<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span>resultOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleDropDownClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">clickedOption</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span>clickedOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> resultOptions <span class=\"token operator\">=</span> deselectedOptions<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> option <span class=\"token operator\">===</span> clickedOption\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span>resultOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleDeleteButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInputValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">// 키보드로 DropDown 선택</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleKeyUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasText<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowDown'</span> <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> selected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span>selected <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'ArrowUp'</span> <span class=\"token operator\">&amp;&amp;</span> selected <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span>selected <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'Enter'</span> <span class=\"token operator\">&amp;&amp;</span> selected <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleDropDownClick</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'autocomplete-wrapper'</span> onKeyUp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleKeyUp<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>InputContainer hasText<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hasText<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span>\n          className<span class=\"token operator\">=</span><span class=\"token string\">'autocomplete-input'</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleInputChange<span class=\"token punctuation\">}</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">'delete-button'</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&amp;</span>times<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InputContainer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>hasText <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>DropDown\n          options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>options<span class=\"token punctuation\">}</span>\n          handleDropDownClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDropDownClick<span class=\"token punctuation\">}</span>\n          selected<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>selected<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DropDown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> options<span class=\"token punctuation\">,</span> handleDropDownClick<span class=\"token punctuation\">,</span> selected <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>DropDownContainer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li\n          key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>idx<span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">handleDropDownClick</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>selected <span class=\"token operator\">===</span> idx <span class=\"token operator\">?</span> <span class=\"token string\">'selected'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>DropDownContainer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><del>다시 테스트해보고 설명하도록 하겠습니다.</del></p>\n<br>\n<h3 id=\"clicktoeditjs\" style=\"position:relative;\"><a href=\"#clicktoeditjs\" aria-label=\"clicktoeditjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ClickToEdit.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBlur</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setEditMode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handleValueChange</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>InputBox<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>isEditMode <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>InputEdit\n          type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newValue<span class=\"token punctuation\">}</span>\n          ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span>\n          onBlur <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>handleBlur<span class=\"token punctuation\">}</span>\n          onChange <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>handleInputChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>span\n        onClick <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span><span class=\"token punctuation\">{</span>newValue<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InputBox<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">onBlur = {handleBlur}</code>가 뭘까?</p>\n<blockquote>\n<p>onblur : 포커스가 해지될 때 이벤트 설정</p>\n</blockquote>\n<p><code class=\"language-text\">&lt;span></code>을 클릭했을 때, 우리는 <code class=\"language-text\">&lt;InputEdit></code>에서 글을 수정할 수 있다. 다음 <code class=\"language-text\">&lt;span></code>을 클릭해 글을 적으려고 했을 때, 다시 <code class=\"language-text\">&lt;span></code>으로 돌아가야한다. 이때 <code class=\"language-text\">onBlur</code> 이벤트를 통해 설정할 수 있다.</p>\n<p><code class=\"language-text\">onBlur</code> 이벤트를 쓰지 않으면, 그대로 <code class=\"language-text\">&lt;InputEdit></code>에 머물러 있게 된다.</p>\n<br>\n<h2 id=\"부족한-내용-\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%A1%B1%ED%95%9C-%EB%82%B4%EC%9A%A9-\" aria-label=\"부족한 내용  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부족한 내용 🧐</h2>\n<h3 id=\"modaljs\" style=\"position:relative;\"><a href=\"#modaljs\" aria-label=\"modaljs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modal.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ModalBackdrop <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // Modal이 떴을 때의 배경을 깔아주는 CSS를 구현\n  background-color: rgba(0, 0, 0, 0.3);\n  left:0; right:0; top:0; bottom:0;\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ModalView <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">attrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가 가능</span>\n  role<span class=\"token operator\">:</span> <span class=\"token string\">'dialog'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  // Modal창 CSS를 구현\n  border: 1px solid;\n  width: 300px;\n  height: 100px;\n  background-color: white;\n  border-radius: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  > button {\n    background: none;\n    border: none;\n    color: black;\n    font-size: 1rem;\n    margin-top: -30px;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Modal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOpen<span class=\"token punctuation\">,</span> setIsOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">openModalHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOpen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\n        <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">{</span>isOpen <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>ModalBackdrop onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>openModalHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>ModalView onClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>openModalHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>x<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n                모달 창\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalView<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ModalBackdrop<span class=\"token operator\">></span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">&lt;ModalBackdrop></code>과 <code class=\"language-text\">&lt;button></code>을 클릭하면 <code class=\"language-text\">&lt;ModalView></code>가 나타난다. 여기서 중요한 점은  <code class=\"language-text\">&lt;ModalView></code>를 닫을 때  <code class=\"language-text\">&lt;ModalBackdrop></code>과 <code class=\"language-text\">&lt;button></code>을 클릭해야 닫혀야 하는데 <code class=\"language-text\">&lt;ModalView></code>를 눌러도 닫힌다.</p>\n<p>부모 엘리먼트에게도 이벤트가 전파되지 않기 위해 <code class=\"language-text\">e.stopPropagation</code>을 사용한다.</p>\n<blockquote>\n<p><strong>e.stopPropagation</strong>는 이벤트가 상위 엘리먼트에 전달되지 않게 막아 준다.</p>\n</blockquote>\n<p><code class=\"language-text\">e.stopPropagation</code>를 기억해두자!</p>\n<br>\n<h3 id=\"togglejs\" style=\"position:relative;\"><a href=\"#togglejs\" aria-label=\"togglejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Toggle.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContainer <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: relative;\n  margin-top: 8rem;\n  left: 47%;\n  cursor: pointer;\n\n  > .toggle-container {\n    width: 50px;\n    height: 24px;\n    border-radius: 30px;\n    background-color: #8b8b8b;\n    // TODO : .toggle--checked 클래스가 활성화 되었을 경우의 CSS를 구현합니다.\n    &amp;.toggle--checked {\n      background-color: blue;\n      transition: 0.5s;\n    }\n  }\n\n  > .toggle-circle {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    background-color: #ffffff;\n    transition: 0.5s;\n    // TODO : .toggle--checked 클래스가 활성화 되었을 경우의 CSS를 구현합니다.\n    &amp;.toggle--checked {\n      left: 27px;\n      transition: 0.5s;\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Styled-Components 부분에서 <code class=\"language-text\">> .toggle-circle</code>, <code class=\"language-text\">&amp;.toggle--checked</code> 사용한 점이다.</p>\n<p><code class=\"language-text\">> .toggle-circle</code>는 ToggleContainer안에 있는 toggle-circle를 의미한다. className = “toggle-circle” 이다.</p>\n<p><code class=\"language-text\">&amp;.toggle--checked</code> 클래스의 코드를 각각 <code class=\"language-text\">.toggle-container</code>, <code class=\"language-text\">.toggle-circle</code>와 연결해준다. className = “toggle—checked toggle-container” 라고 쓸 수 있다.</p>\n<blockquote>\n<p>엠퍼샌드(&#x26;)를 사용하여 해당 컴포넌트를 재참조한다.</p>\n</blockquote>\n<p><strong>엠퍼샌드(&#x26;)</strong> 를 잘 활용하면 글로벌로 걸려있는 스타일과 충돌이 일어날 수 있을 때에도 유용하게 처리할 수 있다는 장점이 있다.</p>\n<br>\n<h3 id=\"tabjs\" style=\"position:relative;\"><a href=\"#tabjs\" aria-label=\"tabjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tab.js</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token punctuation\">.</span>submenu <span class=\"token punctuation\">{</span>\n    width <span class=\"token operator\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">calc()</code>는 괄호 안의 식을 계산한 결과를 속성값으로 사용하게 해주는 함수이다.</p>\n</blockquote>\n<p>예를 들어, 3개의 버튼이 있다면 공평하게 세 부분으로 나누고 싶을 것이다. 그럼 width: 33%를 해야하는가?</p>\n<p>그럴 필요 없다. 위 코드처럼 <code class=\"language-text\">calc()</code>함수를 이용해서 해결하면 된다.</p>\n<br>\n<h2 id=\"느낀점-\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90-\" aria-label=\"느낀점  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점 🤠</h2>\n<hr>\n<p>페어와 함께 과제를 수행했다. 혼자서 과제를 다시 이해하고 싶어서 처음부터 과제를 다시 풀었다. Styled-Components 라이브러리로 HTML + JS + CSS까지 묶어서 하나의 JS파일 안에서 컴포넌트 단위로 개발할 수 있어서 너무 편했고, Styled-Components 사용법에 대해 더 자세히 알 수 있어서 좋았다.</p>","frontmatter":{"date":"August 30, 2022","title":"React Custom Component","categories":"codestates blog","author":"김예린","emoji":"📔"},"fields":{"slug":"/2022-08-29~30/"}},"prev":{"id":"68734453-6a9c-5e1b-99e3-ccc099989987","html":"<p>Redux에 들어가기에 앞서, mutate state가 무엇인지 알아보자.</p>\n<h2 id=\"mutate-state\" style=\"position:relative;\"><a href=\"#mutate-state\" aria-label=\"mutate state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mutate state</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//action.text가 필요해보이는데?</span>\n        <span class=\"token keyword\">case</span> add_todo<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> delete_todo<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>state를 수정하려고 할 때, 아래처럼 작성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token keyword\">case</span> add_todo<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-값을-바꿀-땐-mutate를-할-수-없다\" style=\"position:relative;\"><a href=\"#state-%EA%B0%92%EC%9D%84-%EB%B0%94%EA%BF%80-%EB%95%90-mutate%EB%A5%BC-%ED%95%A0-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"state 값을 바꿀 땐 mutate를 할 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state 값을 바꿀 땐, mutate를 할 수 없다!</h3>\n<p><strong>mutate</strong></p>\n<blockquote>\n<p>파생변수를 생성할 때 사용하는 함수.</p>\n</blockquote>\n<p>쉽게 말하자면 array의 값을 바꾸는 메서드는 사용할 수 없다는 이야기다. <code class=\"language-text\">state.push</code> 이런 것들 말이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token keyword\">case</span> add_todo<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>text<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>state를 바꿀때는 위 코드처럼 새롭게 정의해주어야 한다. 즉 state가 배열이라면, <strong>배열을 새롭게 정의</strong>해야한다.</p>\n<p>Redux에서 저장소나 리듀서에서 상태 불변성을 지키자. NEVER! MUTATE STATE!!</p>\n<br>\n<h2 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<hr>\n<p><img src=\"/c98922b5a476e12b853576324f12f5c4/redux-data-flow.gif\" alt=\"github-blog-1.png\"> [Redux 구조]</p>\n<details>\n<summary>Redux는 다음과 같은 순서로 상태를 관리한다.</summary>\n<div markdown=\"1\">       \n<br>\n<ol>\n<li>\n<p>상태가 변경되어야 하는 이벤트가 발생하면, 변경될 상태에 대한 정보가 담긴 <code class=\"language-text\">Action</code> 객체가 생성된다.</p>\n</li>\n<li>\n<p>이 Action 객체는 <code class=\"language-text\">Dispatch</code> 함수의 인자로 전달된다.</p>\n</li>\n<li>\n<p>Dispatch 함수는 Action 객체를 <code class=\"language-text\">Reducer</code> 함수로 전달한다.</p>\n</li>\n<li>\n<p>Reducer 함수는 Action 객체의 값을 확인하고, 그 값에 따라 전역 상태 저장소 <code class=\"language-text\">Store</code>의 상태를 변경한다.</p>\n</li>\n<li>\n<p>상태가 변경되면, React는 화면을 다시 <strong>렌더링</strong> 한다.</p>\n</li>\n</ol>\n<br>\n</div>\n</details>\n<p>정리하면, Redux에서는 Action → Dispatch → Reducer → Store\n순서로 데이터가 <strong>단방향</strong>으로 흐르게 된다.</p>\n<br>\n<h2 id=\"cmarket-redux-예고\" style=\"position:relative;\"><a href=\"#cmarket-redux-%EC%98%88%EA%B3%A0\" aria-label=\"cmarket redux 예고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cmarket Redux 예고</h2>\n<hr>\n<p>내일까지 진행되는 과제인 Cmarket Redux는 다음 포스팅에서 뵙겠습니다.</p>","frontmatter":{"date":"September 01, 2022","title":"Redux","categories":"codestates blog","author":"김예린","emoji":null},"fields":{"slug":"/2022-09-01/"}},"site":{"siteMetadata":{"siteUrl":"https://yelinz515.github.io","comments":{"utterances":{"repo":"yelinz515/blog-comments"}}}}},"pageContext":{"slug":"/2022-08-31/","nextSlug":"/2022-08-29~30/","prevSlug":"/2022-09-01/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}